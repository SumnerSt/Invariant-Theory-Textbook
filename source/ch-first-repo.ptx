<?xml version='1.0' encoding='utf-8'?>
<chapter xml:id="ch-first-repo">
    <title>Your First Repository</title>
    <section xml:id="sec-making-an-account">
        <title>Making an Account</title>
        <p>
All the features of GitHub we'll be using are available
using a free GitHub account.
        </p>
        <note xml:id="make-github-account">
            <p>
Anyone can create a free GitHub account by
visiting <url href="https://github.com/signup"/>.
            </p>
        </note>
        <p>
For additional free resources, you may also be eligible for
a waiver.
        </p>
<note xml:id="github-education-discount">
        <p>
Many students and faculty of schools, colleges, and universties
are eligible to request an
educator discount, providing <q>Pro</q> features at no cost,
by visiting
<url href="https://education.github.com/" />
while logged into their GitHub account.
        </p>
    </note>
<p>
You do not need to wait for approval of your educator
discount before continuing to the next section.
        </p>
    </section>
    <section xml:id="sec-creating-the-repo">
        <title>Creating the Repo</title>
        <p>
Once logged in, a new repository can be created by
pressing the <kbd>+</kbd> button in the toolbar,
or visiting <url href="https://github.com/new"/>.
        </p>
        <p>
The repository will need a name, which can be something
like <c>my-first-repo</c> for this tutorial. (GitHub
will also suggest a cute random name like
<c>ubiquitous-space-tribble</c> if you have writer's block.)
        </p>
        <p>
Repositories can be <term>public</term> to everyone
on the internet or <term>private</term> to only people you
approved. I encourage you to work publicly,
to make it easier to collaborate with the open-source
community <ndash/> I can personally attest to
publishing many garbage repositories on GitHub
(along with my hopefully-useful ones), and no one
has called me out for it yet!
        </p>
        <p>
The last option we'll make sure to select is to
<q>Initialize this repository with:
Add a README file</q>. Then click <q>Create repository</q>.
        </p>
    </section>
    <section xml:id="sec-editing-readme-md">
        <title>Editing README.md</title>
        <p>
While logged into <c>GitHub.com</c>, you have the ability to edit
individual files on your repositories. (If your repository
is public, others can see those files, but cannot edit them
unless you make them a collaborator,
see <xref ref="ch-collaboration"/>.)
        </p>
        <p>
An easy way to edit an individual file is just to click
the pencil icon such as the one that appears on your README.
This file is written in <q>Markdown</q>.
        </p>
        <definition xml:id="def-markdown">
                <statement>
                        <p>
<term>Markdown</term> is a markup language
that takes plain text <c>like *this*</c> and renders it
<q>like <em>this</em></q>. Sites like
<url href="https://www.MarkdownTutorial.com"/> and
<url href="https://www.MarkdownGuide.org"/> offer more
complete tutorials.
                        </p>
                </statement>
        </definition>
        <p>
Try to edit your file to say something like <q>I'm learning how to
use GitHub!</q>, perhaps adding a link back to this document
using <c>[this markup](https://g4m.clontz.org)</c>. You
can click the Preview tab to see what your README will look like.
GitHub also provides a panel of several formatting options
you can click on.
        </p>
        <p>
When you're happy with your updated README, click the
<q>Commit changes</q> button. This will create a new
<term>commit</term>, representing a new moment in your
project's history. You should write a useful commit message
summarizing the work you've done since your last commit
(or perhaps keep the default <q>Update README.md</q>)
Doing this will update the README visible on your repository
homepage on <c>GitHub.com</c>.
        </p>
        <remark xml:id="remark-readme">
                <p>
README files are important! If you ever want to share your
repository source with someone else, it's the first thing
they will read. Likewise, if you want to use someone else's
repository, they will hopefully include first steps in their
own README file.
                </p>
        </remark>
        <p>
Finally, you might be interested in visiting the <q>Insights</q>
tab for your repository, and specifically the <q>Network</q> page.
It should reveal a graphic similar to <xref ref="fig-git-branches"/>
visualizing the history of your project across all GitHub collaborators.
Right now you don't have any collaborators and just a couple commits,
but keeping in mind this model for your project history will be
useful as we juggle various commits and pushes and syncs and so on
down the line.
        </p>
    </section>
    <section xml:id="sec-using-github-dev">
        <title>Using <c>GitHub.dev</c></title>
        <p>
Using the <c>GitHub.com</c> interface to author or edit just one file
can be useful (I do this all the time to make quick typo fixes on
my blog), but you will likely be using GitHub to manage
projects that involve editing mulitple files at the same
time, and likely you will have non-text files (such as images)
that you need to include in your work as well.
        </p>
        <p>
One way to quickly be able to manage several files at once is
to use the <url href="https://github.dev">GitHub.dev</url> service
offered by GitHub. Try clicking that link - you should have a
fully-functional VS Code text editor right inside your web browser.
        </p>
        <note xml:id="note-browser-github-dev">
            <p>
It's best to use an updated version
of Chrome, Edge, or Firefox when using GitHub. In particular, Safari tends
to show off its rough edges when using advanced web applications like
<c>GitHub.dev</c>, so it's best to choose an alternative.
            </p>
        </note>
        <p>
You can create files, edit them, upload images, and do whatever you
like at <c>GitHub.dev</c>. But this isn't your repository - it's just an
example. So, we'll need a way to tell <c>GitHub.dev</c> we want to work on
the repository we just made instead.
        </p>
        <note xml:id="opening-github-dev">
            <p>
There are two very easy ways to access the <c>GitHub.dev</c> service.
The first is to just
change the address of your repository from <c>GitHub.com</c> to
<c>GitHub.dev</c> in your browser. For example, if your repository lives at
<c>https://github.com/YourUserName/YourGreatRepo</c>, you should visit
<c>https://github.dev/YourUserName/YourGreatRepo</c>.
            </p>
            <p>
The other trick is even fancier. When you are visiting
<c>https://github.com/YourUserName/YourGreatRepo</c> in your web browser
and not writing in a text box, press the period (<kbd>.</kbd>) key.
            </p>
        </note>
        <p>
Either way, you should now have a <c>GitHub.dev</c> window where you can manage
all the files of your project. Using the <term>Explorer</term> sidebar
(<xref ref="fig-explorer"/>), you can create
new files, rename files, move files, upload files, and more. Selecting
a file opens it, and lets you edit it as needed. Your changes are saved
automatically in <c>GitHub.dev</c>, but they won't show up at <c>GitHub.com</c> just yet.
        </p>
        <figure xml:id="fig-explorer">
                <image width="60%" source="screenshots/codespace-explorer-newfile.png"/>
                <caption>Explorer sidebar and New File button</caption>
        </figure>
    </section>
    <section xml:id="sec-commiting-and-syncing">
        <title>Commiting Your Work</title>
        <p>
After you're tried creating/editing/uploading a few files, now it's
time to <em>commit</em> those changes to your repository. The easiest way
to do this is to use the <term>Source Control</term> sidebar. You may have
noticed that a numerical badge appeared by the Source Control icon as you
created, edited, or deleted files. This number represents the number of files
that have been changed in some way since the previous commit. By opening
the Source Control panel, you'll see a list of these files.
        </p>
        <p>
Clicking these
file names not only lets you open the file and edit it further, but you
are shown a <term>diff</term> - a summary of the lines that have been altered
since the previous commit. (This is a good reason to not write in a long
continuous line, but to break lines every 80ish characters or so. That way
you can easily see where exactly a change is made between each commit.)
        </p>
        <p>
The idea is this: edit as you see fit, knowing that your files are being
saved at <c>GitHub.dev</c> and won't be lost if you accidentally refresh your
web browser. However, you'll need to eventually commit those changes to
the repository in order to share your work with anyone else, and to ensure
that the work is preserved in the long term. The Source Control panel
provides a place to write a <term>commit message</term>, a short
phrase or sentence that summarizes the work you've done. (Writer's block?
For now just type <q>learning GitHub.dev</q>.) Then once you click
the <q>Commit and Push</q> button, your work will be logged as a permanent
commit to the repository.
        </p>
        <p>
This is a good point to review your commit history again. You probably
have three commits: the initial commit made when you created the repository,
the <c>README.md</c> update you made using <c>GitHub.com</c>'s editing interface,
and this more elaborate <c>GitHub.dev</c> commit involving possibly several files.
To visualize this history, you can go to the Insights/Network page
described earlier, or click on the <q>3 commits</q> link
from your <c>GitHub.com</c> repository
homepage to see a linearization of this history. From there you can click
on each commit to see exactly what has changed from the previous commit across
all files.
        </p>
    </section>
    <section>
        <title>Next steps</title>
        <p>
Now that you've gotten the hang of the basics of
committing and pushing changes to a repository,
you can move on to using Codespaces to write
and execute programs and code (<xref ref="ch-coding"/>)
or setting up a webpage hosted by GitHub
(<xref ref="ch-github-pages"/>).
        </p>
    </section>
</chapter>