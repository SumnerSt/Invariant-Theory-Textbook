<?xml version='1.0' encoding='utf-8'?>
<chapter xml:id="ch-github-pages" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>GitHub Pages</title>
    <section xml:id="sec-upload-html">
        <title>Creating a Simple Webpage</title>
        <p>
Having made your first repository in <xref ref="ch-first-repo"/>, and
committed a few changes, you are now ready to share your work with the
public. One way is to share a link to your repository at <c>GitHub.com</c>;
as long as you made it a public repository, anyone can see your files.
        </p>
        <p>
Another option is to use <term>GitHub Pages</term> to host
a customizable website with your work. This can be done with
any existing repository by manually authoring HTML files, so let's try it
out with our existing example first. (Or, you can skip ahead
to <xref ref="sec-using-a-template"/> to create a portfolio website
without using HTML.)
        </p>
        <p>
Use <c>GitHub.dev</c> (<xref ref="opening-github-dev"/>)
to create three files in the root of a new or existing repository.
            <ul>
                <li>
                    <p>
Create a file named <c>.nojekyll</c> 
(note the period at the start) but don't add any text to it.
Simply creating this file will disable some advanced features
of GitHub Pages we don't need right now.
                    </p>
                </li>
                <li>
                    <p>
Create an <c>index.html</c> file. This book won't discuss in depth
how to author HTML, as
we'll learn how to author our website content in Markdown in the next
section, but for now add the following content:
                    </p>
                    <program language="html">
                        <input>
<xi:include href="../assets/website-example.html" parse="text"/>
                        </input>
                    </program>
                </li>
                <li>
                    <p>
Download
<dataurl source="git-branches.png"><c>git-branches.png</c></dataurl>
(used for <xref ref="fig-git-branches"/>)
and upload it to <c>GitHub.dev</c>.
                    </p>
                </li>
            </ul>
You can alternatively use this
<dataurl source="website-example.zip">ZIP file</dataurl>
which has all three files created for you (be sure to unzip it
first!).
        </p>
        <p>
Commit this update to your repository using Source Control,
and confirm you see the two new files on your <c>GitHub.com</c> repository
webpage.
        </p>
        <note xml:id="enable-github-pages">
            <p>
To enable GitHub Pages, go to your repository Settings, and choose
Pages from the sidebar. From there you can select to 
<q>Deploy from a branch</q>, using the <c>main</c> branch
and the <c>/ (root)</c>
directory, and after a few moments your site will be enabled.
<figure xml:id="fig-web-setting">
    <image width="100%" source="screenshots/pages-setting.png"/> 
    <caption>Settings to deploy a web page.</caption>
</figure>     
            </p>
        </note>
        <p>
Once enabled, GitHub will provide a link to your public GitHub Pages
website, hosted at <c>GitHub.io</c>. Click it and you'll see the
content of your <c>index.html</c> file, which displays the image
downloaded as <c>git-branches.png</c>. (It should look like
<dataurl source="website-example.html">this</dataurl>.)
        </p>
        <note xml:id="distinguishing-the-githubs">
            <p>
It's good to remember how to
distinguish the three GitHub domains:
                <ul>
                    <li>
                        <p>
<c>GitHub.com</c> is where your repository lives. It can be public
or private.
                        </p>
                    </li>
                    <li>
                        <p>
<c>GitHub.dev</c> is where you can make changes to your repository
through your web browser. This is private to you and you must commit
and push your changes to the <c>GitHub.com</c> repository every so often.
(See also <xref ref="sec-github-pages-codespace"/>.)
                        </p>
                    </li>
                    <li>
                        <p>
<c>GitHub.io</c> is your public GitHub Pages website, which you can
edit by updating your repository files.
                        </p>
                    </li>
                </ul>
            </p>
        </note>
        <p>
I recommend you add a link to your <c>GitHub.io</c> website from
your <c>GitHub.com</c> repository page.
        </p>
        <note xml:id="about-link-to-github-io">
            <p>
On your repository page, you can edit the <q>About</q> sidebar
to add useful information about your project. In particular,
there's a checkbox to automatically
display your <c>GitHub.io</c> link to make it easy
for others (and yourself!) to find your GitHub Pages site.
            </p>
        </note>
    </section>
    <section xml:id="sec-using-a-template">
        <!-- TODO add better README to template repo -->
        <title>Using a Template</title>
        <p>
While you can create a custom website by authoring HTML, it'd be
great to not have to! There are several <q>templates</q> available for
GitHub Pages that allow you to author your content in Markdown,
as well as providing nice themes, automatic linking between different
sections of your website, and so on.
        </p>
        <!-- <p>
Note that GitHub Pages uses something called <q>Jekyll</q> to
generate websites from Markdown files. So if you want to look around
the internet for your perfect template, try seaching for <q>Jekyll templates</q>
or <q>GitHub Pages templates</q> in your favorite search engine.
        </p> -->
        <!-- <p>
For this book, I've created a <q>fork</q> of the
<url href="https://github.com/mmistakes/minimal-mistakes/"><q>
    Minimal Mistakes
</q></url>
template.
        </p>
        <definition xml:id="def-fork">
            <statement>
                <p>
A <term>fork</term> of a repository is a complete copy of the repository's
history. For an open-source project, a fork allows anyone to make a copy
of the project, make changes to their copy, and (if appropriate) contribute
those changes back to the original project.
                </p>
            </statement>
        </definition>
        <p>
In this case,
I made a fork so that I could ensure my book stays compatible with the
template I'm providing you, even if the original template receives an
update from its author. I'm allowed to do this because the
Minimal Mistakes template is made available under the terms of the
<url href="https://github.com/mmistakes/minimal-mistakes/blob/master/LICENSE">
    open-source MIT license
</url>.
        </p> -->
        <definition xml:id="def-template">
            <statement>
                <p>
A <term>template</term> repository on GitHub provides other GitHub users
the ability to easily obtain a shallow copy of the latest commit to the
template, created as a new repository they control.
                </p>
            </statement>
        </definition>
        <p>
This is meant for situations like a GitHub Pages website, where
you probably don't care about every single change that was made to create the
template you're using, and you don't plan on contributing any of your changes
back to the original repository. Instead,
you just want the latest working files so you can insert your own 
content and get it online.
        </p>
        <p>
Visit
<url href="https://github.com/StevenClontz/github-for-mathematicians-minimal-mistakes">
    this page
</url>
and click <q>Use this template</q>, and <q>Create a new repository</q>.
This creates a new repository you own on <c>GitHub.com</c>, and
you can follow the instructions in <xref ref="enable-github-pages"/>
to enable GitHub Pages.
<figure xml:id="fig-pages-template">
    <image width="100%" source="screenshots/pages-template.png"/> 
    <caption>Use this template button.</caption>
</figure>     
Once that's done, visit your new <c>GitHub.io</c> website to see the
placeholder content of your new website
(don't forget to add a link to your <q>About</q> sidebar, see
<xref ref="about-link-to-github-io"/>).
        </p>
        <note xml:id="actions-progress">
            <p>
Deploying to GitHub Pages can take some time, so visiting the
<q>Actions</q> tab on your repository page will let you see how this
process is progressing. You can also see the status of this process
by looking for the following icon next to your commit message:
an orange dot (in progress), a green checkmark
(deployed), or a red X (failure).
            </p>
            <figure xml:id="fig-web-actions">
                <image width="100%" source="screenshots/pages-actions.png"/> 
                <caption>Actions tab on <c>Github.com</c>.</caption>
        </figure>       
        </note>
    </section>
    <section xml:id="sec-posts-and-pages">
        <title>Customizing Your Site</title>
        <introduction>
            <p>
Now that you have the template website hosted by GitHub Pages, you of course
will want to customize it to yourself. For this book, I'll get you started by
handling a few of the obvious first steps, assuming you're
using the <c>GitHub.dev</c> service (<xref ref="opening-github-dev"/>).
            </p>
        </introduction>
        <subsection xml:id="subsec-posts-and-pages-config">
            <title>Configuration</title>
            <p>
First things first, let's configure some basic elements of your site.
These settings are found in <c>/_config.yml</c>. There are several
pieces of this file you likely aren't interested in editing
(nor do you need to know at this point what they do), but you should
at least find the <c>title:</c> and <c>description:</c> lines
and edit them with your own information. The same goes for the
<c>author: name:</c> and <c>author: bio:</c> entries as well.
            </p>
            <p>
To see that this worked, use Source Control to Commit and Push your
edits. After a while (<xref ref="actions-progress" />) you should
be able to refresh your website and see your updated title, name, etc.
(In <xref ref="sec-github-pages-codespace"/>, we will learn how to
preview our edits more quickly, and without needing to push them to a
live website, provided we're comfortable using a Codespace as explored in
<xref ref="ch-coding"/>.) You can repeat this process after each of the
edits described below to see your results reflected on the live website.
            </p>
        </subsection>
        <subsection xml:id="subsec-photo">
            <title>Photo</title>
            <p>
Next, let's add your photo. A placeholder is available
at <c>/assets/images/bio-photo.jpg</c>. You can drag your own JPG-format
photo onto it in the File Explorer. Then you can delete the placeholder
<c>bio-photo.jpg</c> and rename your photo to <c>bio-photo.jpg</c>.
            </p>
        </subsection>
        <subsection xml:id="subsec-pages">
            <title>Pages</title>
            <p>
By default you have five files in your <c>/_pages/</c> directory.
The <c>404.md</c> file describes what visitors see when a page isn't found,
and the three <c>*-archive.md</c> files can be used to customize
pages that display certain blog posts.
            </p>
            <p>
The <c>about.md</c> file describes the content of your About page.
The top few lines (<xref ref="about-page-metadata"/>)
describe some metadata about the page. You can edit the
<c>permalink</c> to change the web address that will be used for
this page, and the <c>title</c> to change the title shown in the browser
tab for this page.
            </p>
            <listing xml:id="about-page-metadata">
                <caption>About page metadata</caption>
                <program>
                    <input>
---
permalink: /about/
title: "About"
---
                    </input>
                </program>
            </listing>
            <p>
Below the metadata is Markdown source that can be edited to include
whatever content you'd like to appear within the page.
            </p>
            <p>
To create additional pages, copy-paste <c>about.md</c> to create new
files in the <c>/_pages/</c> directory, making sure to assign each
page its own permalink. If you want these pages to appear in the navigation
bar on top of your site, edit the <c>/_data/navigation.yml</c> configuration
file to point to each permalink.
            </p>
            <p> You can preview a compiled version of your markdown files (<c>.md </c>) on the web, without having to run any commands.
                It is enough to open a markdown file and split the screen.
            </p>
            <figure xml:id="fig-mdpreview">
                    <image width="100%" source="screenshots/codespace-preview-md.png"/>
                    <caption>Split screen to preview markdown file.</caption>
            </figure>
        </subsection>
        <subsection xml:id="subsec-posts">
            <title>Posts</title>
            <p>
Posts are similar to pages, and live in the <c>/_posts/</c> directory.
To create a new post, copy-paste any of the existing post files and
rename it into the form <c>YYYY-MM-DD-my-new-post.md</c> (where
<c>YYYY-MM-DD</c> is the date you want associated with the post).
            </p>
            <p>
The content of your post is just Markdown, as with pages. However,
you have slightly different metadata to edit (<xref ref="post-metadata"/>).
In the <c>date</c> you can set the specific time of day you want your
post to be associated with. You can also choose to assign each post
<c>categories</c> and <c>tags</c>, which allow your posts to be sorted
into appropriate category and tag pages, which are generated automatically
for you.
            </p>
            <listing xml:id="post-metadata">
                <caption>Post metadata</caption>
                <program>
                    <input>
---
title: "Welcome to Jekyll!"
date: 2019-04-18T15:34:30-04:00
categories:
    - blog
tags:
    - Jekyll
    - update
---
                    </input>
                </program>
            </listing>
        </subsection>
    </section>
  <section xml:id="sec-github-pages-codespace">
    <title>Previewing GitHub Pages</title>
    <p>
Another useful application of Codespaces is the ability
to preview your GitHub Pages site created in
<xref ref="sec-using-a-template"/>. Return to that repository
on <c>GitHub.com</c> and create a new Codespace
(<xref ref="note-create-codespace"/>).
    </p>
    <p>
To spin up your live preview, open a terminal by using the
shortcut noted in <xref ref="remark-terminal-shortcut"/>. To make
sure the necessary software has been installed, type <c>bundle</c>
and hit <kbd>Enter</kbd>. Then, you can enter <c>jekyll serve</c>
to start the preview server.
    </p>
    <p>
You'll see some output, and eventually
<c>Server address: http://127.0.0.1:4000</c>. At that time an
alert will appear that says <q>Your application on port 4000
is available</q>. You can use its <q>Open in browser</q> button,
or hover over the <c>http://127.0.0.1:4000</c> link to be given
the same option.
    </p>
    <p>
This should open a URL such as
<c>random-words-123randomletters789-4000.app.github.dev</c>,
which will show a live preview of your GitHub Pages site in a new
tab. As soon as you make edits in your Codespace tab, you can
return to this tab to (within a second or two) see how your edits
will update your live site. Note that this URL is private to you,
and your public site won't be updated until you Commit &amp; Sync
your changes
(<xref ref="note-commit-sync"/>).
    </p>
    <p>
Personally, I use <c>GitHub.dev</c> (or even just the
<c>GitHub.com</c> edit button) rather than a full
Codespace when adding a quick post or making a quick edit on
many of my GitHub Pages websites. But the Codespace option is very
handy for when bigger changes are necessary, and you want to make
sure everything looks just right before pushing it live to the public.
    </p>
  </section>
</chapter>